#!/bin/bash
# usrmnt.sh, 由Anthony Richardson编写, 
# 经过作者授权, 可以在本书中使用. 

# 用法:       usrmnt.sh
# 描述: 挂载设备, 调用这个脚本的用户必须属于
#              /etc/sudoers文件中的MNTUSERS组. 

# ----------------------------------------------------------
#  这是一个用户挂载设备的脚本, 脚本将会使用sudo来递归的调用自身. 
#  只有拥有合适权限的用户才能使用

#   usermount /dev/fd0 /mnt/floppy

#  来代替

#   sudo usermount /dev/fd0 /mnt/floppy

#  我使用相同的技术来处理我所有的sudo脚本, 
#+ 因为我觉得它很方便. 
# ----------------------------------------------------------

#  如果没有设置SUDO_COMMAND变量, 而且我们并没有处于sudo运行的状态下
#+ (译者注: 也就是说第一次运行, 还没被递归), 这样就会开始递归了. 传递用户的真实id和组id . . . 

if [ -z "$SUDO_COMMAND" ]
then
   mntusr=$(id -u) grpusr=$(id -g) sudo $0 $*
   exit 0
fi

# 如果我们处于sudo调用自身的状态中(译者注: 就是说处于递归中), 那么我们就会运行到这里. 
/bin/mount $* -o uid=$mntusr,gid=$grpusr

exit 0

# 附注(脚本作者添加的): 
# -------------------------------------------------

# 1) Linux允许在/etc/fstab文件中使用"users"选项, 
#    以便于任何用户都可以挂载可移动设备. 
#    但是, 在服务器上, 
#    我希望只有一小部分用户可以访问可移动设备. 
#    我发现使用sudo可以给我更多的控制空间. 

# 2) 我还发现, 通过使用组, 
#    我能够更容易的完成这个任务. 

# 3) 这个方法可以将root访问mount命令的权利, 
#    赋予任何具有合适权限的用户, 
#    所以一定要小心那些被你赋予访问权限的用户. 
#    你可以开发出类似于mntfloppy, mntcdrom,
#    和mntsamba脚本, 将访问类型分类, 
#    然后你就可以使用上面所讲的这种技术, 
#    获得对mount命令更好的控制. 
